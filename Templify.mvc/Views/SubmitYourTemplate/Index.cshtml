@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer
@{
    ViewData["Title"] = @Localizer["SubmitYourTemplate"];
    ViewData["ActiveTab"] = "submit";
}

<div class="content">
    <div class="container">
        <div class="submit-page">
            <div></div>
            <!-- Header Section -->
            <div class="submit-header">
                <h1><i class="ri-upload-cloud-line"></i> @Localizer["SubmitYourTemplate"]</h1>
                <p>@Localizer["Shareyour"]</p>
            </div>

            <!-- Stats Section -->
            <div class="stats-section">
                <div class="stat-card">
                    <div class="stat-icon"><i class="ri-layout-4-line"></i></div>
                    <div class="stat-number">1480+</div>
                    <div class="stat-label">@Localizer["Products"]</div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon"><i class="ri-user-star-line"></i></div>
                    <div class="stat-number">140+</div>
                    <div class="stat-label">@Localizer["ExpertDesigners"]</div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon"><i class="ri-money-dollar-circle-line"></i></div>
                    <div class="stat-number">$950k+</div>
                    <div class="stat-label">@Localizer["TotalEarnings"]</div>
                </div>
            </div>

            <!-- Submit Form Section -->
            <div class="submit-form-section">
                <div class="form-container">
                    <h2><i class="ri-add-circle-line"></i> @Localizer["AddNewProduct"]</h2>
                    
                    <form class="product-form" method="post" enctype="multipart/form-data">
                        @Html.AntiForgeryToken()
                        
                        <!-- Basic Information -->
                        <div class="form-section">
                            <h3><i class="ri-information-line"></i> @Localizer["BasicInformation"]</h3>
                            
                            <div class="form-group">
                                <label for="productName" class="form-label">@Localizer["ProductName"]*</label>
                                <input type="text" id="productName" name="Name" class="form-control" required 
                                       value="@(Model?.Name ?? "")" 
                                       minlength="3" maxlength="100"
                                       placeholder="@Localizer["Enterproductname"]">
                                @if (!ViewData.ModelState.IsValid && ViewData.ModelState["Name"]?.Errors.Any() == true)
                                {
                                    <div class="validation-error">@ViewData.ModelState["Name"].Errors.First().ErrorMessage</div>
                                }
                            </div>
                            
                            <div class="form-group">
                                <label for="productDescription" class="form-label">@Localizer["Description"] *</label>
                                <textarea id="productDescription" name="Description" class="form-control" required 
                                          minlength="10" maxlength="2000"
                                          placeholder="@Localizer["Describeyourproduct"]">@(Model?.Description ?? "")</textarea>
                                @if (!ViewData.ModelState.IsValid && ViewData.ModelState["Description"]?.Errors.Any() == true)
                                {
                                    <div class="validation-error">@ViewData.ModelState["Description"].Errors.First().ErrorMessage</div>
                                }
                            </div>
                            
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="productPrice" class="form-label">Price *</label>
                                    <input type="number" id="productPrice" name="Price" class="form-control" required 
                                           step="0.01" min="0.01" max="9999.99"
                                           value="@(Model?.Price.ToString() ?? "")"
                                           placeholder="0.00">
                                    @if (!ViewData.ModelState.IsValid && ViewData.ModelState["Price"]?.Errors.Any() == true)
                                    {
                                        <div class="validation-error">@ViewData.ModelState["Price"].Errors.First().ErrorMessage</div>
                                    }
                                </div>
                                
                                <div class="form-group">
                                    <label for="productCategory" class="form-label">@Localizer["Category"] *</label>
                                    <select id="productCategory" name="Category" class="form-control" required>
                                        <option value="">@Localizer["Selectcategory"]</option>
                                        <option value="business">@Localizer["Business"]</option>
                                        <option value="3d web">@Localizer["3DWeb"]</option>
                                        <option value="saas platforms">@Localizer["SaaSPlatforms"]</option>
                                        <option value="agency">@Localizer["Agency"]</option>
                                        <option value="portfolio design">@Localizer["PortfolioDesign"]</option>
                                        <option value="ecommerce">@Localizer["Ecommerce"]</option>
                                        <option value="education">@Localizer["Education"]</option>
                                        <option value="health">@Localizer["Health"]</option>
                                        <option value="marketing">@Localizer["Marketing"]</option>
                                        <option value="restaurant & food">@Localizer["RestaurantFood"]</option>
                                        <option value="gaming & entertainment">@Localizer["GamingEntertainment"]</option>
                                        <option value="real estate">@Localizer["RealEstate"]</option>
                                    </select>
                                    @if (!ViewData.ModelState.IsValid && ViewData.ModelState["Category"]?.Errors.Any() == true)
                                    {
                                        <div class="validation-error">@ViewData.ModelState["Category"].Errors.First().ErrorMessage</div>
                                    }
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label for="productTags" class="form-label">@Localizer["Tags"]</label>
                                <input type="text" id="productTags" name="Tags" class="form-control" 
                                       maxlength="200"
                                       value="@(Model?.Tags ?? "")"
                                       placeholder="@Localizer["Entertags"]">
                                @if (!ViewData.ModelState.IsValid && ViewData.ModelState["Tags"]?.Errors.Any() == true)
                                {
                                    <div class="validation-error">@ViewData.ModelState["Tags"].Errors.First().ErrorMessage</div>
                                }
                            </div>
            </div>

                        <!-- Product Image -->
                        <div class="form-section">
                            <h3><i class="ri-image-line"></i> @Localizer["ProductImage"]</h3>
                            
                            <div class="image-upload-section">
                                <div class="image-preview">
                                    <img id="imagePreview" src="/src/img/tem1.png" alt="Product Preview" />
                                    <div class="image-overlay">
                                        <i class="ri-camera-line"></i>
                                        <span>@Localizer["Click"]</span>
            </div>
          </div>
                                
                                <div class="upload-info">
                                    <label for="productImage" class="upload-btn">
                                        <i class="ri-upload-line"></i>
                                        @Localizer["ChooseImage"]
            </label>
                                    <input type="file" id="productImage" name="ImageFile" accept="image/*" 
                                           style="display: none;" required>
                                    <small>
                                        <i class="ri-information-line"></i>
                                        @Localizer["Recommended"]
                                    </small>
                                </div>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <div class="form-actions">
                            <button type="submit" class="btn-primary">
                                <i class="ri-upload-cloud-line"></i>
                                @Localizer["SubmitProduct"]
                            </button>
                        </div>
          </form>
                </div>
            </div>
        </div>
    </div>
</div>

          <style>
    .submit-page {
        max-width: 1200px;
        margin: 0 auto;
        padding: 40px 20px;
    }

    .submit-header {
        text-align: center;
        margin-bottom: 40px;
    }

    .submit-header h1 {
        color: #00ff88;
        font-size: 2.5rem;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 12px;
        text-align: center;
        flex-wrap: wrap;
        width: 100%;
        box-sizing: border-box;
    }

    .submit-header p {
        color: #ccc;
        font-size: 1.1rem;
        max-width: 600px;
        margin: 0 auto;
        text-align: center;
        line-height: 1.5;
    }

    .stats-section {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 40px;
    }

    .stat-card {
        background: #232526;
        border: 1px solid #333;
        border-radius: 16px;
        padding: 24px;
        text-align: center;
        transition: all 0.3s ease;
    }

    .stat-card:hover {
        transform: translateY(-2px);
        border-color: #00ff88;
        box-shadow: 0 8px 24px rgba(0, 255, 136, 0.1);
    }

    .stat-icon {
        font-size: 2.5rem;
        color: #00ff88;
        margin-bottom: 12px;
    }

    .stat-number {
        font-size: 1.8rem;
        font-weight: 700;
        color: #fff;
        margin-bottom: 4px;
    }

    .stat-label {
        color: #ccc;
        font-size: 0.9rem;
    }

    .submit-form-section {
        background: #181a1b;
        border: 2px solid #23272a;
        border-radius: 20px;
        padding: 40px;
    }

    .form-container h2 {
        color: #00ff88;
        font-size: 1.8rem;
        margin-bottom: 30px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .form-section {
        margin-bottom: 40px;
        padding-bottom: 30px;
        border-bottom: 1px solid #333;
    }

    .form-section:last-child {
        border-bottom: none;
        margin-bottom: 0;
    }

    .form-section h3 {
        color: #fff;
        font-size: 1.3rem;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    .form-group label {
        display: block;
        color: #fff;
        font-weight: 600;
        margin-bottom: 8px;
        font-size: 0.95rem;
    }

    .form-control {
        width: 100%;
        background: #232526;
        border: 2px solid #333;
        border-radius: 8px;
        padding: 12px 16px;
        color: #fff;
        font-size: 1rem;
        transition: all 0.3s ease;
        box-sizing: border-box;
    }

    .form-control:focus {
        outline: none;
        border-color: #00ff88;
        box-shadow: 0 0 0 3px rgba(0, 255, 136, 0.1);
    }

    .form-control.error {
        border-color: #ff6b6b;
        box-shadow: 0 0 0 3px rgba(255, 107, 107, 0.1);
    }

    .form-control:focus {
        outline: none;
        border-color: #00ff88;
        box-shadow: 0 0 0 3px rgba(0, 255, 136, 0.1);
    }

    .form-control.error:focus {
        border-color: #ff6b6b;
        box-shadow: 0 0 0 3px rgba(255, 107, 107, 0.1);
    }

    .form-control::placeholder {
        color: #666;
    }

    .validation-error {
        color: #ff6b6b;
        font-size: 0.85rem;
        margin-top: 6px;
        display: flex;
        align-items: center;
        gap: 6px;
        animation: fadeIn 0.3s ease-in;
    }

    .validation-error::before {
        content: "⚠";
        font-size: 1rem;
    }

    .form-error {
        animation: fadeIn 0.3s ease-in;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .form-label {
        display: block;
        color: #fff;
        font-weight: 600;
        margin-bottom: 8px;
        font-size: 0.95rem;
    }

    .form-label::after {
        content: " *";
        color: #ff6b6b;
    }

    .form-label:has(+ .form-control:not([required]))::after {
        content: "";
    }

    .form-group {
        margin-bottom: 24px;
        position: relative;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    .form-actions {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 40px;
    }

    .btn-primary {
        background: linear-gradient(90deg, #00ff88 0%, #00e0ff 100%);
        color: #111;
        border: none;
        border-radius: 12px;
        padding: 16px 32px;
        font-weight: 700;
        font-size: 1.1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        min-width: 200px;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 255, 136, 0.3);
    }

    .btn-primary:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    .form-group small {
        display: block;
        color: #999;
        font-size: 0.85rem;
        margin-top: 6px;
        display: flex;
        align-items: center;
        gap: 4px;
    }

    /* Image Upload Styles */
    .image-upload-section {
        display: grid;
        grid-template-columns: 200px 1fr;
        gap: 20px;
        align-items: start;
    }

    .image-preview {
        position: relative;
        width: 200px;
        height: 150px;
        border-radius: 12px;
        overflow: hidden;
        border: 2px dashed #333;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .image-preview:hover {
        border-color: #00ff88;
    }

    .image-preview img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .image-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: #fff;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .image-preview:hover .image-overlay {
              opacity: 1;
            }

    .image-overlay i {
        font-size: 2rem;
        margin-bottom: 8px;
        color: #00ff88;
    }

    .upload-info {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .upload-btn {
        background: linear-gradient(135deg, #00ff88, #00e0ff);
        color: #111;
        padding: 12px 24px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        transition: all 0.3s ease;
        border: none;
        width: fit-content;
    }

    .upload-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 24px rgba(0, 255, 136, 0.3);
    }



    /* Form Actions */
    .form-actions {
        display: flex;
        gap: 16px;
        justify-content: flex-end;
        margin-top: 40px;
        padding-top: 30px;
        border-top: 1px solid #333;
    }

    .btn-primary, .btn-secondary {
        padding: 14px 28px;
        border-radius: 8px;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        transition: all 0.3s ease;
        border: none;
    }

    .btn-primary {
        background: linear-gradient(135deg, #00ff88, #00e0ff);
        color: #111;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 24px rgba(0, 255, 136, 0.3);
    }

    .btn-secondary {
        background: #333;
        color: #fff;
    }

    .btn-secondary:hover {
        background: #444;
        transform: translateY(-2px);
    }

    /* Responsive Design */
    @@media (max-width: 1024px) {
        .submit-page {
            padding: 30px 15px;
        }

        .submit-header h1 {
            font-size: 2.3rem;
        }

        .stats-section {
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 15px;
        }

        .submit-form-section {
            padding: 30px;
        }

        .form-row {
            grid-template-columns: 1fr;
            gap: 15px;
        }
    }

    @@media (max-width: 950px) {
        .submit-page {
            padding: 28px 15px;
        }

        .submit-header h1 {
            font-size: 2.2rem;
        }

        .stats-section {
            grid-template-columns: repeat(auto-fit, minmax(170px, 1fr));
        }

        .image-upload-section {
            grid-template-columns: 190px 1fr;
        }

        .image-preview {
            width: 190px;
            height: 142px;
        }
    }

    @@media (max-width: 900px) {
        .submit-page {
            padding: 25px 15px;
        }

        .submit-header h1 {
            font-size: 2rem;
            flex-direction: column;
            gap: 8px;
        }

        .submit-header p {
            font-size: 1rem;
            padding: 0 10px;
        }

        .stats-section {
            grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
            gap: 15px;
        }

        .stat-card {
            padding: 20px;
        }

        .stat-icon {
            font-size: 2.2rem;
        }

        .stat-number {
            font-size: 1.6rem;
        }

        .submit-form-section {
            padding: 25px;
        }

        .form-container h2 {
            font-size: 1.6rem;
        }

        .form-section h3 {
            font-size: 1.2rem;
        }

        .image-upload-section {
            grid-template-columns: 180px 1fr;
            gap: 15px;
        }

        .image-preview {
            width: 180px;
            height: 135px;
        }
    }

    @@media (max-width: 768px) {
        .submit-page {
            padding: 20px 10px;
        }

        .submit-header h1 {
            font-size: 1.8rem;
            flex-direction: column;
            gap: 6px;
        }

        .submit-header p {
            font-size: 0.95rem;
            padding: 0 8px;
        }

        .stats-section {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .stat-card {
            padding: 20px;
        }

        .stat-icon {
            font-size: 2rem;
        }

        .stat-number {
            font-size: 1.5rem;
        }

        .submit-form-section {
            padding: 20px;
            border-radius: 16px;
        }

        .form-container h2 {
            font-size: 1.5rem;
            margin-bottom: 20px;
        }

        .form-section {
            margin-bottom: 30px;
            padding-bottom: 20px;
        }

        .form-section h3 {
            font-size: 1.2rem;
            margin-bottom: 15px;
        }

        .form-row {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-control {
            padding: 10px 14px;
            font-size: 0.95rem;
        }

        textarea.form-control {
            min-height: 80px;
        }

        .image-upload-section {
            grid-template-columns: 1fr;
            text-align: center;
            gap: 15px;
        }

        .image-preview {
            width: 100%;
            max-width: 280px;
            height: 120px;
            margin: 0 auto;
        }

        .upload-info {
            align-items: center;
        }

        .upload-btn {
            padding: 10px 20px;
            font-size: 0.95rem;
        }

        .form-actions {
            flex-direction: column;
            gap: 12px;
            margin-top: 30px;
            padding-top: 20px;
        }

        .btn-primary, .btn-secondary {
            width: 100%;
            justify-content: center;
            padding: 12px 24px;
            font-size: 0.95rem;
        }
    }

    @@media (max-width: 480px) {
        .submit-page {
            padding: 15px 8px;
        }

        .submit-header h1 {
            font-size: 1.6rem;
            flex-direction: column;
            gap: 6px;
        }

        .submit-header p {
            font-size: 0.9rem;
            padding: 0 5px;
        }

        .stats-section {
            gap: 12px;
        }

        .stat-card {
            padding: 16px;
        }

        .stat-icon {
            font-size: 1.8rem;
        }

        .stat-number {
            font-size: 1.3rem;
        }

        .stat-label {
            font-size: 0.85rem;
        }

        .submit-form-section {
            padding: 16px;
            border-radius: 12px;
        }

        .form-container h2 {
            font-size: 1.3rem;
            margin-bottom: 16px;
        }

        .form-section {
            margin-bottom: 24px;
            padding-bottom: 16px;
        }

        .form-section h3 {
            font-size: 1.1rem;
            margin-bottom: 12px;
        }

        .form-group {
            margin-bottom: 12px;
        }

        .form-group label {
            font-size: 0.9rem;
            margin-bottom: 6px;
        }

        .form-control {
            padding: 8px 12px;
            font-size: 0.9rem;
            border-radius: 6px;
        }

        textarea.form-control {
            min-height: 70px;
        }

        .form-group small {
            font-size: 0.8rem;
        }

        .image-preview {
            max-width: 240px;
            height: 100px;
        }

        .image-overlay i {
            font-size: 1.5rem;
        }

        .image-overlay span {
            font-size: 0.85rem;
        }

        .upload-btn {
            padding: 8px 16px;
            font-size: 0.9rem;
        }

        .form-actions {
            margin-top: 24px;
            padding-top: 16px;
            gap: 10px;
        }

        .btn-primary, .btn-secondary {
            padding: 10px 20px;
            font-size: 0.9rem;
        }
    }

    /* Landscape orientation for mobile */
    @@media (max-width: 768px) and (orientation: landscape) {
        .submit-page {
            padding: 15px 20px;
        }

        .stats-section {
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
        }

        .submit-form-section {
            padding: 25px;
        }

        .form-row {
            grid-template-columns: 1fr 1fr;
        }

        .image-upload-section {
            grid-template-columns: 200px 1fr;
            text-align: left;
        }

        .image-preview {
            width: 200px;
            height: 120px;
            margin: 0;
        }
    }

    /* High DPI displays */
    @@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
        .form-control {
            border-width: 1px;
        }

        .image-preview {
            border-width: 1px;
        }
    }

    /* Very small screens */
    @@media (max-width: 320px) {
        .submit-page {
            padding: 10px 5px;
        }

        .submit-header h1 {
            font-size: 1.4rem;
            flex-direction: column;
            gap: 4px;
        }

        .submit-header p {
            font-size: 0.85rem;
            padding: 0 2px;
        }

        .stat-card {
            padding: 12px;
        }

        .stat-icon {
            font-size: 1.5rem;
        }

        .stat-number {
            font-size: 1.1rem;
        }

        .stat-label {
            font-size: 0.8rem;
        }
    }

    /* Reduced motion for accessibility */
    @@media (prefers-reduced-motion: reduce) {
        .stat-card,
        .upload-btn,
        .btn-primary,
        .btn-secondary,
        .image-preview,
        .form-control {
            transition: none;
        }

        .stat-card:hover,
        .upload-btn:hover,
        .btn-primary:hover,
        .btn-secondary:hover {
            transform: none;
        }
    }
          </style>

<script>
    // Image Preview
    document.getElementById('productImage').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            if (file.size > 5 * 1024 * 1024) {
                alert('File size must be less than 5MB');
                this.value = '';
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                document.getElementById('imagePreview').src = e.target.result;
            };
            reader.readAsDataURL(file);
        }
    });

    // Click on image preview to trigger file input
    document.querySelector('.image-preview').addEventListener('click', function() {
        document.getElementById('productImage').click();
    });

    // Touch support for mobile devices
    document.querySelector('.image-preview').addEventListener('touchstart', function(e) {
        e.preventDefault();
        document.getElementById('productImage').click();
    });

    // Prevent zoom on input focus for iOS
    document.querySelectorAll('input, textarea, select').forEach(function(element) {
        element.addEventListener('focus', function() {
            if (window.innerWidth <= 768) {
                this.style.fontSize = '16px'; // Prevents zoom on iOS
            }
        });
    });

    // Form Validation
    document.querySelector('.product-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Clear previous errors
        clearValidationErrors();
        
        let isValid = true;
        const errors = [];

        // Validate required fields
        const requiredFields = this.querySelectorAll('[required]');
        requiredFields.forEach(field => {
            if (!field.value.trim()) {
                showFieldError(field, 'This field is required');
                isValid = false;
            } else {
                clearFieldError(field);
            }
        });

        // Validate specific fields
        const nameField = document.getElementById('productName');
        if (nameField.value.trim()) {
            if (nameField.value.trim().length < 3) {
                showFieldError(nameField, 'Product name must be at least 3 characters long');
                isValid = false;
            } else if (nameField.value.trim().length > 100) {
                showFieldError(nameField, 'Product name cannot exceed 100 characters');
                isValid = false;
            }
        }

        const descriptionField = document.getElementById('productDescription');
        if (descriptionField.value.trim()) {
            if (descriptionField.value.trim().length < 10) {
                showFieldError(descriptionField, 'Description must be at least 10 characters long');
                isValid = false;
            } else if (descriptionField.value.trim().length > 2000) {
                showFieldError(descriptionField, 'Description cannot exceed 2000 characters');
                isValid = false;
            }
        }

        const priceField = document.getElementById('productPrice');
        if (priceField.value) {
            const price = parseFloat(priceField.value);
            if (isNaN(price) || price < 0.01 || price > 9999.99) {
                showFieldError(priceField, 'Price must be between $0.01 and $9999.99');
                isValid = false;
            }
        }

        const categoryField = document.getElementById('productCategory');
        if (categoryField.value === '') {
            showFieldError(categoryField, 'Please select a category');
            isValid = false;
        }

        const tagsField = document.getElementById('productTags');
        if (tagsField.value.trim() && tagsField.value.trim().length > 200) {
            showFieldError(tagsField, 'Tags cannot exceed 200 characters');
            isValid = false;
        }

        if (isValid) {
            // Submit the form
            this.submit();
        } else {
            // Show error message
            showFormError('Please correct the errors above before submitting.');
        }
    });

    function showFieldError(field, message) {
        field.classList.add('error');
        
        // Create or update error message
        let errorDiv = field.parentNode.querySelector('.validation-error');
        if (!errorDiv) {
            errorDiv = document.createElement('div');
            errorDiv.className = 'validation-error';
            field.parentNode.appendChild(errorDiv);
        }
        errorDiv.textContent = message;
    }

    function clearFieldError(field) {
        field.classList.remove('error');
        const errorDiv = field.parentNode.querySelector('.validation-error');
        if (errorDiv) {
            errorDiv.remove();
        }
    }

    function clearValidationErrors() {
        document.querySelectorAll('.validation-error').forEach(error => error.remove());
        document.querySelectorAll('.form-control.error').forEach(field => field.classList.remove('error'));
    }

    function showFormError(message) {
        // Remove existing form error
        const existingError = document.querySelector('.form-error');
        if (existingError) {
            existingError.remove();
        }

        // Create form error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'form-error';
        errorDiv.style.cssText = 'background: rgba(255, 107, 107, 0.1); border: 1px solid #ff6b6b; color: #ff6b6b; padding: 12px; border-radius: 8px; margin-bottom: 20px; text-align: center; font-weight: 600;';
        errorDiv.textContent = message;

        // Insert at the top of the form
        const form = document.querySelector('.product-form');
        form.insertBefore(errorDiv, form.firstChild);
    }

    // Real-time validation
    document.querySelectorAll('.form-control').forEach(field => {
        field.addEventListener('blur', function() {
            validateField(this);
        });

        field.addEventListener('input', function() {
            if (this.classList.contains('error')) {
                validateField(this);
            }
        });
    });

    function validateField(field) {
        const value = field.value.trim();
        
        // Clear previous error
        clearFieldError(field);

        // Validate based on field type
        if (field.hasAttribute('required') && !value) {
            showFieldError(field, 'This field is required');
            return false;
        }

        if (field.id === 'productName' && value) {
            if (value.length < 3) {
                showFieldError(field, 'Product name must be at least 3 characters long');
                return false;
            } else if (value.length > 100) {
                showFieldError(field, 'Product name cannot exceed 100 characters');
                return false;
            }
        }

        if (field.id === 'productDescription' && value) {
            if (value.length < 10) {
                showFieldError(field, 'Description must be at least 10 characters long');
                return false;
            } else if (value.length > 2000) {
                showFieldError(field, 'Description cannot exceed 2000 characters');
                return false;
            }
        }

        if (field.id === 'productPrice' && value) {
            const price = parseFloat(value);
            if (isNaN(price) || price < 0.01 || price > 9999.99) {
                showFieldError(field, 'Price must be between $0.01 and $9999.99');
                return false;
            }
        }

        if (field.id === 'productCategory' && field.value === '') {
            showFieldError(field, 'Please select a category');
            return false;
        }

        if (field.id === 'productTags' && value && value.length > 200) {
            showFieldError(field, 'Tags cannot exceed 200 characters');
            return false;
        }

        return true;
    }
</script>
